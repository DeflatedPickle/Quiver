plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.3.72'
	id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.72'

	id 'distribution'
	id 'application'

	id 'com.diffplug.spotless' version '5.7.0'
	id "de.undercouch.download" version "4.1.1"
}

group 'com.deflatedpickle'
archivesBaseName = 'Quiver'
version '1.7.0'
sourceCompatibility = '1.8'

project.ext {
	licenseDir = new File('licenses', buildDir)
	toolDir = new File('tools', buildDir)
}

allprojects {
	apply plugin: 'distribution'
	apply plugin: 'org.jetbrains.kotlin.jvm'
	apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
	apply plugin: 'com.diffplug.spotless'

	repositories {
		jcenter()
		mavenCentral()

		maven { url 'https://jitpack.io' }
		maven { url 'https://github.com/eugener/oxbow/raw/master/maven/repository' }
	}

	spotless {
		ratchetFrom 'origin/rewrite'

		java {
			importOrder()
			removeUnusedImports()
			googleJavaFormat()

			licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
		}

		groovyGradle {
			target '*.gradle'
			greclipse()
		}

		kotlin {
			ktlint()

			licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
		}

		format 'misc', {
			target '*.md', '.gitignore'

			trimTrailingWhitespace()
			indentWithTabs()
			endWithNewline()
		}
	}

	compileKotlin {
		kotlinOptions.jvmTarget = sourceCompatibility
	}
}

startScripts {
	executableDir = ""
}

distributions {
	//noinspection GroovyAssignabilityCheck
	main {
		contents {
			from files('README.MD', 'LICENSE')
			from startScripts

			into('data') {
				from files('data')
			}

			into('licenses') {
				from files("$buildDir/licenses")
			}
			into('tools') {
				from files("$buildDir/tools")
			}

			subprojects.each { p ->
				into('plugins') {
					from p.getTasksByName("jar", true)
				}
			}
		}
	}
}

distZip {
	eachFile { file ->
		def list = []

		// Collect a list of all the JARs produced by submodules
		subprojects.each { p ->
			if (
			!(p.name in ["master", "core", "launcher"]) &&
			p.getTasksByName("jar", true).archiveFile.size > 0
			) {
				list.add(
						p.getTasksByName("jar", true)
						.archiveFile.first()
						.getAsFile().get()
						)
			}
		}

		// Files in /bin are copied to the main directory
		// so we can exclude them
		if (file.path.contains('bin')) {
			file.exclude()
		} else if (file.path.contains('lib') &&
		// Check if the current file is a submodule
		file.getFile() in list
		|| file.name =~ /discordrpc*./
		|| file.name =~ /pluginmanager*./
		|| file.name =~ /Quiver-\d\.\d\.\d\.jar/
		|| file.name =~ /settingsgui*./
		|| file.name =~ /sniffle*./
		|| file.name =~ /tipoftheday*./) {
			file.exclude()
		}
	}
}

run {
	/*applicationDefaultJvmArgs = [
	 "-XX:+UseG1GC"
	 ]*/

	args = ['indev']

	doFirst {
		file('run').mkdirs()

		copy {
			from 'data'
			into 'run/data'
		}
	}

	workingDir 'run'

	dependencies {
		implementation project(':core')
		runtimeOnly project(':launcher')

		runtimeOnly project(':foldertree')
		runtimeOnly project(':filetable')
		runtimeOnly project(':filepanel')

		runtimeOnly project(':textviewer')
		runtimeOnly project(':tableviewer')
		runtimeOnly project(':imageviewer')
		runtimeOnly project(':treeviewer')

		runtimeOnly project(':packexport')
		runtimeOnly project(':packsquashstep')
		runtimeOnly project(':zipstep')

		runtimeOnly 'com.github.DeflatedPickle:sniffle:e00cc3a565'
	}

	application {
		mainClassName = 'com.deflatedpickle.quiver.launcher.MainKt'
	}
}

task pushSubmodules(type: Exec) {
	workingDir "."
	commandLine "sh", "-c", "git submodule foreach 'git add .'"
	commandLine "sh", "-c", "git submodule foreach 'git commit -a -m \"Update from submodule\" || :'"
}